#BlueJ class context
comment0.params=
comment0.target=MusicLibrary()
comment0.text=\n\ The\ constructor\ initialise\ the\ albums\ ArrayList\ and\ allTracks\ arrayList.\n\ @param\ album\ A\ arraylist\ to\ store\ albums\ that\ added\ into\ the\ library.\n\ @param\ allTracks\ All\ the\ tracks\ that\ are\ added\ into\ the\ library.\ \n
comment1.params=album
comment1.target=void\ addAlbum(Album)
comment1.text=\n\ This\ method\ is\ to\ add\ albums\ into\ the\ music\ library.\n
comment2.params=
comment2.target=java.util.ArrayList\ getTracks()
comment2.text=\n\ The\ method\ to\ get\ an\ arraylist\ of\ all\ the\ tracks\ that\ added\ into\ the\ library.\n
comment3.params=
comment3.target=void\ importTracks()
comment3.text=\n\ The\ method\ to\ import\ real\ mp3\ files\ in\ the\ "MP3"\ folder.\n\ Add\ the\ mp3\ files\ into\ the\ allTracks\ arraylist\ and\ get\ a\ list\ of\ albums.\n
comment4.params=track
comment4.target=void\ addTrack(Track)
comment4.text=\n\ A\ method\ to\ add\ tracks\ into\ the\ library.\n
comment5.params=minRating\ duration
comment5.target=java.util.ArrayList\ createPlayList(int,\ int)
comment5.text=\n\ A\ method\ to\ create\ a\ random\ playlist\ and\ implement\ the\ required\ functions.\n\ The\ user\ should\ give\ a\ required\ minimum\ rating.\ Tracks\ in\ the\ playlist\ should\ have\ a\ rating\n\ no\ lower\ than\ the\ minimum\ rating.\n\ The\ user\ should\ give\ a\ required\ duration.\ The\ total\ length\ of\ the\ tracks\ in\ the\ playlist\ should\n\ be\ no\ longer\ than\ the\ duration.\n\ @param\ minRating\ The\ required\ minimum\ rating\ of\ the\ tracks.\n\ @param\ duration\ The\ required\ total\ running\ time\ of\ the\ playlist.\n
comment6.params=path
comment6.target=void\ saveAllTracks(java.lang.String)
comment6.text=\n\ This\ method\ is\ to\ save\ tracks\ inside\ the\ ArrayList\ to\ the\ given\ file\n\ @param\ path\ Path\ is\ the\ file\ where\ the\ tracks\ will\ be\ saved.\n\ @throws\ IOException\n
comment7.params=filename
comment7.target=java.io.File\ makeAbsoluteFilename(java.lang.String)
comment7.text=\n\ This\ is\ a\ method\ in\ one\ exercise\ in\ the\ blueJ\ textbook.\n\ This\ method\ is\ to\ create\ an\ absolute\ file\ from\ the\ given\ file\ name.\n\ @throws\ IOException\n
comment8.params=
comment8.target=java.io.File\ getProjectFolder()
comment8.text=\n\ I\ write\ this\ method\ by\ refering\ to\ a\ method\ in\ a\ exercise\ in\ the\ blueJ\ textbook.\n\ This\ method\ is\ to\ determine\ the\ name\ of\ the\ current\ project\ folder.\n\ @throws\ URISyntaxException\n\ @return\ Return\ current\ project\ folder.\n
comment9.params=path
comment9.target=java.lang.Object\ readObject(java.lang.String)
comment9.text=\n\ I\ write\ this\ method\ by\ refering\ to\ a\ exercise\ in\ blueJ\ textbook.\n\ This\ method\ is\ to\ read\ the\ ArrayList\ of\ tracks\ that\ the\ user\ saved\ before.\n\ @param\ path\ Path\ is\ the\ filename\ of\ the\ file\ we\ want\ to\ read.\n\ @throws\ IOException,\ ClassNotFoundException.\n\ \n
numComments=10
